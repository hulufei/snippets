snippet cdm "lifecycle componentDidMount"
componentDidMount() {
	$0
}
endsnippet

snippet cdu "lifecycle componentDidUpdate"
componentDidUpdate(prevProps, prevState) {
	$0
}
endsnippet

snippet cwr "lifecycle componentWillReceiveProps"
componentWillReceiveProps(nextProps) {
	$0
}
endsnippet

snippet cwu "lifecycle componentWillUpdate"
componentWillUpdate(nextProps, nextState) {
	$0
}
endsnippet

snippet cwm "lifecycle componentWillMount"
componentWillMount() {
	$0
}
endsnippet

snippet cwun "lifecycle componentWillUnmount"
componentWillUnmount() {
	$0
}
endsnippet

snippet scu "lifecycle shouldComponentUpdate"
shouldComponentUpdate(nextProps, nextState) {
	$0
}
endsnippet

snippet sst "setState"
this.setState({
	${1:key}: ${2:value},
});
endsnippet

snippet rc "React ES6 Component"
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';

class ${1:MyComponent} extends Component {
	static propTypes = {
	}

	static defaultProps = {
	}

	state = {
	}

	render() {
		return (
			${2:<div>
			${3:Hello}
			</div>}
		);
	}
}

export default $1;
endsnippet

snippet rfunc "ES6 functional component"
import React, { PropTypes } from 'react';

function ${1:Name}(props) {
	return (
		${2:<div>
		${3:Hello}
		</div>}
	);
}

$1.propTypes = {
};

export default $1;
endsnippet

snippet rbm "react bind method to this"
this.${1:func} = this.$1.bind(this);
endsnippet

snippet cst "component test scaffold"
import React from 'react';
import { shallow } from 'enzyme';
import ${1:Component} from '${2:./index}';

describe('${3:$1}', () => {
	it('should render correctly', () => {
		const wrapper = shallow(<$1 />);

		expect(wrapper).toMatchSnapshot();
	});
});
endsnippet

snippet ast "action test scaffold"
import configureMockStore from 'redux-mock-store';
import thunk from 'redux-thunk';
const mockStore = configureMockStore([thunk]);

import * as ${1:actions} from './index';

describe('actions/$1', () => {
	it('should ${2:action}', () => {
		const store = mockStore({});
		return store.dispatch($1.${2}()).then(() => {
			expect(store.getActions()).toMatchSnapshot();
		});
	});
});
endsnippet
